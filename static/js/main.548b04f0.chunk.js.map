{"version":3,"sources":["components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/ContactFilter/ContactFilter.js","App.js","index.js","components/ContactList/ContactList.module.scss","components/ContactForm/ContactForm.module.scss"],"names":["ContactList","contacts","onDeleteContact","className","s","list","map","id","name","phoneNumber","list__item","list__text","type","onClick","ErrorText","styled","p","FormError","render","message","validationSchema","Yup","matches","required","initialValues","ContactForm","handleSubmit","values","resetForm","props","onSubmit","console","log","this","htmlFor","fieldInput","placeholder","button","Component","ContactFilter","value","onChange","App","state","contactList","filter","addContact","isInContacts","alert","contact","shortid","generate","setState","prevState","toLowerCase","includes","length","deleteContact","contactId","changeFilter","e","currentTarget","getVisibleContacts","normalizedFilter","visibleContacts","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.548b04f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./ContactList.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul className={s.list}>\r\n    {contacts.map(({ id, name, phoneNumber }) => (\r\n      <li key={id} className={s.list__item}>\r\n        <span className={s.list__text}>{name}</span>\r\n        <span className={s.list__text}>{phoneNumber}</span>\r\n        <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      phoneNumber: PropTypes.string,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport s from \"./ContactForm.module.scss\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n\r\nconst ErrorText = styled.p`\r\n  color: red;\r\n`;\r\n\r\nconst FormError = ({ name }) => {\r\n  return (\r\n    <ErrorMessage\r\n      name={name}\r\n      render={(message) => <ErrorText>{message}</ErrorText>}\r\n    />\r\n  );\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string()\r\n    .matches(\r\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n      \"Name can contain only letters, ', - and space. For example: Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.\"\r\n    )\r\n    .required(),\r\n  phoneNumber: Yup.string()\r\n    .matches(\r\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n      \"Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and startts with +\"\r\n    )\r\n    .required(),\r\n});\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  phoneNumber: \"\",\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  handleSubmit = (values, { resetForm }) => {\r\n    this.props.onSubmit(values);\r\n\r\n    console.log(values);\r\n    resetForm();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={this.handleSubmit}\r\n      >\r\n        <Form>\r\n          <div>\r\n            <label htmlFor=\"name\">Name</label>\r\n            <div>\r\n              <Field\r\n                className={s.fieldInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                placeholder=\"Name\"\r\n              />\r\n              <FormError name=\"name\" />\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"phoneNumber\">Phone number:</label>\r\n            <div>\r\n              <Field\r\n                className={s.fieldInput}\r\n                name=\"phoneNumber\"\r\n                type=\"text\"\r\n                placeholder=\"phoneNumber\"\r\n              />\r\n              <FormError name=\"phoneNumber\" />\r\n            </div>\r\n          </div>\r\n          <button className={s.button} type=\"submit\">\r\n            Add Contact\r\n          </button>\r\n        </Form>\r\n      </Formik>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// Formik -компонент обертка\r\n// initialValues={{ name: '', ... }}\r\n// onSubmit={(values, actions) -\r\n// values: {name: '', age: '', email: ''} обьект собраных значений\r\n// actions:   ProductReviewForm.jsx:20 actions: {resetForm: ƒ, validateForm: ƒ, validateField: ƒ, setErrors: ƒ, setFieldError: ƒ, …}\r\n// actions ->полезные методы || свой метод\r\n// validationSchema={schema}- валидация схемы\r\n// ErrorMessage- показывает где сработала валидация с ошибками\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst ContactFilter = ({ value, onChange }) => (\r\n  <label>\r\n    Filter\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nContactFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactFilter;\r\n","import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\n\r\nimport contactList from \"./phonelist.json\";\r\n\r\nimport ContactList from \"./components/ContactList\";\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactFilter from \"./components/ContactFilter\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: contactList,\r\n    filter: \"\",\r\n  };\r\n\r\n  addContact = ({ name, phoneNumber }) => {\r\n    if (this.isInContacts(name)) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      phoneNumber,\r\n    };\r\n\r\n    this.setState((prevState) => ({\r\n      contacts: [contact, ...prevState.contacts],\r\n    }));\r\n  };\r\n\r\n  isInContacts = (name) => {\r\n    name = name.toLowerCase();\r\n    return (\r\n      this.state.contacts.filter((contact) =>\r\n        contact.name.toLowerCase().includes(name)\r\n      ).length > 0\r\n    );\r\n  };\r\n\r\n  deleteContact = (contactId) => {\r\n    this.setState((prevState) => ({\r\n      contacts: prevState.contacts.filter(\r\n        (contact) => contact.id !== contactId\r\n      ),\r\n    }));\r\n  };\r\n\r\n  //фильтр,принятие ивента\r\n  changeFilter = (e) => {\r\n    this.setState({ filter: e.currentTarget.value });\r\n  };\r\n  // метод фильтрации массива\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm onSubmit={this.addContact} />\r\n        <h2>Contacts</h2>\r\n        <ContactFilter onChange={this.changeFilter} value={filter} />\r\n        <ContactList\r\n          contacts={visibleContacts}\r\n          onDeleteContact={this.deleteContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__33BOB\",\"list__item\":\"ContactList_list__item__2tuL9\",\"list__text\":\"ContactList_list__text__2kv3Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"ContactForm_fieldInput__2cR4X\",\"button\":\"ContactForm_button__1PDYy\"};"],"sourceRoot":""}